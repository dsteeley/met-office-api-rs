/*
 * Global three hourly spot data
 *
 * This API provides three hourly weather forecast data for a requested coordinate defined by a latitude and longitude. The format of the data is GeoJSON.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: enquiries@metoffice.gov.uk
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`get_three_hourly_forecast_using_get1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetThreeHourlyForecastUsingGet1Error {
    Status400(crate::models::VndError),
    Status404(crate::models::VndError),
    Status405(crate::models::VndError),
    Status415(crate::models::VndError),
    Status500(crate::models::VndError),
    UnknownValue(serde_json::Value),
}


pub async fn get_three_hourly_forecast_using_get1(configuration: &configuration::Configuration, latitude: f64, longitude: f64, exclude_parameter_metadata: Option<bool>, include_location_name: Option<bool>) -> Result<crate::models::SpotForecastFeatureCollection, Error<GetThreeHourlyForecastUsingGet1Error>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/forecasts/point/three-hourly", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = exclude_parameter_metadata {
        local_var_req_builder = local_var_req_builder.query(&[("excludeParameterMetadata", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_location_name {
        local_var_req_builder = local_var_req_builder.query(&[("includeLocationName", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("latitude", &latitude.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("longitude", &longitude.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-IBM-Client-Secret", local_var_value);
    };
    if let Some(ref local_var_apiclient) = local_var_configuration.api_client {
        let local_var_client = local_var_apiclient.key.clone();
        let local_var_value = match local_var_apiclient.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_client),
            None => local_var_client,
        };
        local_var_req_builder = local_var_req_builder.header("X-IBM-Client-Id", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        // TODO remove before publish
        // println!("DWS:{:#?}", &local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetThreeHourlyForecastUsingGet1Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}
